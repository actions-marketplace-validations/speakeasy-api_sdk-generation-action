name: Speakeasy SDK Generation Workflow

on:
  workflow_call:
    inputs:
      speakeasy_version:
        description: The version of the Speakeasy CLI to use or "latest"
        default: latest
        required: false
        type: string
      openapi_doc_location:
        description: The location of the OpenAPI document to use, either a relative path within the repo or a URL to a publicly hosted document
        required: true
        type: string
      languages:
        description: |-
          A yaml string containing a list of languages to generate SDKs for example:
          languages: |
            - go: ./go-sdk # specifying a output directory
            - python # using default output of ./python-client-sdk
            - typescript # using default output of ./typescript-client-sdk

          If multiple languages are present we will treat this repo as a mono repo, if a single language is present as a single language repo
        required: true
        type: string
      publish_python:
        description: "Publish the Python SDK to PyPi"
        default: false
        required: false
        type: boolean
      debug:
        description: "Enable debug logging"
        default: "false"
        type: string
    secrets:
      github_access_token:
        description: A GitHub access token with write access to the repo
        required: true
      pypi_token:
        description: A PyPi access token for publishing the package to PyPi, include the `pypi-` prefix
        required: false

jobs:
  generate:
    name: Generate SDK
    runs-on: ubuntu-latest
    steps:
      - uses: speakeasy-api/sdk-generation-action@v1.4
        with:
          speakeasy_version: ${{ inputs.speakeasy_version }}
          openapi_doc_location: ${{ inputs.openapi_doc_location }}
          github_access_token: ${{ secrets.github_access_token }}
          languages: ${{ inputs.languages }}
  publish-pypi:
    if: ${{ jobs.generate.outputs.python_regenerated == 'true' && inputs.publish_python == true }}
    name: Publish SDK
    runs-on: ubuntu-latest
    needs: generate
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
